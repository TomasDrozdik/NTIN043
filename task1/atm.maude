fmod CASH is
    including NAT .
    including INT .
    including BOOL .

    sort Balance .
    subsort Balance < Int .
    op noBalance : -> Balance [ctor] .

    sort BankNote .
    ops 100 200 500 1000 2000 : -> BankNote [ctor] .

    sort Cash .
    subsort BankNote < Cash .
    op noCash : -> Cash [ctor] .
    op __ : Cash Cash -> Cash [assoc id: noCash] .

    sort Error .
    ops ok err : -> Error .

    sort MaybeCash .
    op maybeCash : Error Cash -> MaybeCash [ctor] .

    vars BN BN1 BN2 : BankNote .
    vars C C1 C2 : Cash .
    vars N : Int .

    op val : BankNote -> Int .
    eq val(100) = 100 .
    eq val(200) = 200 .
    eq val(500) = 500 .
    eq val(1000) = 1000 .
    eq val(2000) = 2000 .

    op _<_ : BankNote BankNote -> Bool .
    eq BN1 < BN2 = val(BN1) < val(BN2) .

    op sum : Cash -> Balance .
    eq sum(C) = $sum(C, 0) .
    op $sum : Cash Balance -> Balance .
    eq $sum(C BN , N) = $sum(C, val(BN) + N) .
    eq $sum(noCash, N) = N .

    *** Expect DESC ordering on the Cash list
    op _\_ : Cash Cash -> MaybeCash .
    eq C \ noCash = maybeCash(ok, C) .
    eq noCash \ C = maybeCash(err, C) . *** left side did not have enough cash, need C more
    eq C1 BN1 \ C2 BN2 =
        if BN1 == BN2
            then C1 \ C2
            else if BN1 < BN2
                then BN1 C1 \ C2 BN2
                else maybeCash(err, BN1) *** right side had too few BN1's
            fi
        fi .

    op someCash : MaybeCash -> Cash .
    eq someCash(maybeCash(ok, C)) = C .

endfm

fmod ATM is
    including CASH .
    including NAT .
    including BOOL .

    sort Customer .
    op noCustomer : -> Customer [ctor] .
    op loggedCustomer : Card -> Customer [ctor] .

    sort Card .
    subsort Card < Nat .
    op noCard : -> Card .

    sort Pin .
    subsort Pin < Nat .
    op noPin : -> Pin .

    sort Account .
    op noAccount : -> Account [ctor] .
    op account : Card Pin Balance -> Account [ctor] .

    sort Database .
    subsort Account < Database .
    op empty : -> Database [ctor] .
    op __ : Database Database -> Database [assoc id: empty] .

    sort Atm .
    op atm : Database Cash Customer -> Atm [ctor] .

    vars D : Database .
    vars C C1 C2 : Card .
    vars P P1 P2 : Pin .
    vars A : Account .
    vars B B1 B2 : Balance .
    vars ATMCash DepositCash RequestedCash : Cash .

    op accountExists : Database Card -> Bool .
    eq accountExists(empty, C) = false .
    eq accountExists(D account(C1, P, B), C2)
        = if C1 == C2 then true else accountExists(D, C2) fi .

    op getAccountBalance : Database Card -> Balance .
    eq getAccountBalance(empty, C) = noBalance .
    eq getAccountBalance(D account(C1, P, B), C2)
        = if C1 == C2 then B else getAccountBalance(D, C2) fi .

    op getAccountPin : Database Card -> Pin .
    eq getAccountPin(empty, C) = noPin .
    eq getAccountPin(D account(C1, P, B), C2)
        = if C1 == C2 then P else getAccountPin(D, C2) fi .

    op setAccountBalance : Database Card Balance -> Database .
    eq setAccountBalance(empty, C, B) = empty .
    eq setAccountBalance(D account(C1, P, B1), C2, B2) =
        if C1 == C2 then D account(C1, P, B2) else setAccountBalance(account(C1, P, B1) D, C2, B2) fi .

    op login : Atm Card Pin -> Atm .
    ceq login(atm(D, ATMCash, noCustomer), C, P) = atm(D, ATMCash, loggedCustomer(C))
        if accountExists(D, C) /\ getAccountPin(D, C) == P .

    op logout : Atm -> Atm .
    eq logout(atm(D, ATMCash, loggedCustomer(C))) = atm(D, ATMCash, noCustomer) .

    op balance : Atm -> Balance .
    eq balance(atm(D, ATMCash, loggedCustomer(C))) = getAccountBalance(D, C) .

    op deposit : Atm Cash -> Atm .
    eq deposit(atm(D, ATMCash, loggedCustomer(C)), DepositCash) =
        atm(setAccountBalance(D, C, getAccountBalance(D, C) + sum(DepositCash)),
            ATMCash DepositCash,
            loggedCustomer(C)) .

    op withdraw : Atm Cash -> Atm .
    ceq deposit(atm(D, ATMCash, loggedCustomer(C)), RequestedCash) =
        atm(setAccountBalance(D, C, getAccountBalance(D, C) + - sum(RequestedCash)),
            someCash(ATMCash \ RequestedCash),
            loggedCustomer(C))
        if getAccountBalance(D, C) > sum(RequestedCash) .
endfm
