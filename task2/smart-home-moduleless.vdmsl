types

JSON = map token to token ;

Time = nat ;

UUID = token ;

UpdateMessage ::
    time : Time
    data : JSON
;

DeviceUpdate = map UUID to UpdateMessage ;

Sensor ::
    uuid : UUID
    updates : seq of UpdateMessage
;

Device ::
    uuid : UUID
    sensors : set of Sensor
    config : JSON
;

functions

Sensor_getUpdate : Senso -> UpdateMessage
Sensor_getUpdate(sensor) updateMessage ==
    hd sensor.updates
;
 
Device_fetchUpdate : Device -> DeviceUpdate
Device_fetchUpdate(device) == {sensor.uuid |-> Sensor_getUpdate(sensor) | sensor : Sensor & sensor in set device.sensors}
;

values

temperature_update : seq of UpdateMessage = [
    mk_UpdateMessage(1, { mk_token("temperature") |-> mk_token(21) }),
    mk_UpdateMessage(2, { mk_token("temperature") |-> mk_token(21) }),
    mk_UpdateMessage(3, { mk_token("temperature") |-> mk_token(21) }),
    mk_UpdateMessage(4, { mk_token("temperature") |-> mk_token(21) })
];

temperature_sensor : Sensor = mk_Sensor(mk_token("1"), temperature_update);
