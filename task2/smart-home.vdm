module Common
    export all
    definitions
    types
        String  = seq of char ;

        Frequency = real ;

        Time = nat ;
        DateTime ::
            year : nat
            month : nat
            day : nat
            hour : nat
            minute : nat
            second : nat

            inv mk_Time(year, month, day, hour, minute, second) ==
                month <= 12 and day <= 31 and hour < 24 and minute < 60 and second < 60

    functions
        timeDiff(t1 : Time, t2 : Time) r : Time
        pre t1 > t2
        post r = t1 - t2

        timeToString(t : Time) s : String
        --TODO post s
end Common

module Sensor
    imports
        from Common all

    exports
        types UpdateMessage
        functions getUpdate

    definitions

    types
        Type = <TemperatureSensor> | <CameraSensor> | <HumiditySensor> ;

        UpdateMessage ::
            time : Time
            message : map String to String

    functions
        getUpdate() r : UpdateMessage
            -- get new state of the sensor
end Sensor

module Control
    imports from Common all

    types
        Commands = <PowerOn> | <PowerOff> | 
end

module Device
    -- uuid
    -- auth sync token from Station
    -- set of sensors and controls
end

module Station
    -- set of devices
    -- UserDatabase
    -- StationLog
    -- set of access logs
    -- login of user
    -- logout
end

module DeviceDatabase
    -- currently active Devices
    -- previously seen but disconnected devices
    -- pub key
end

module UserDatabase
    -- user
    -- password hash
end

module StationLog
    -- append only
    -- log entry type
end

module User
    -- id
    -- root / user
end
